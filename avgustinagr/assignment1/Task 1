def words_anagrams(word1, word2):  #Slower, less memory
    letters={}  #word1=word1.lower()  and word2=word2.lower() for case insensitive
    for letter in word1:
        if letter in letters:
            letters[letter]+=1
        else:
            letters[letter]=1

    for letter in word2:
        if letter not in letters or letters[letter]==0:
            return 0
        else:
            letters[letter]-=1

    for letter in letters:
        if letters[letter]!=0:
            return 0
    return 1

def word_anagramsCS(word1,word2):  #Quicker, more memory; Assuming the words are made of only A-Z and a-z
    letters=[0]*52
    for letter in word1:
        letters[ord(letter)-ord('a')]+=1
    for letter2 in word2:
        letters[ord(letter2)-ord('a')]-=1
    for i in range(0,len(letters)):
        if letters[i]!=0:
            return 0
    return 1

#print word_anagramsCS("dada","adad")

def sent_anagrams(sent1, sent2):  #to fix: high time complexity and doesn`t work with punctuation
    sent1 = sent1.split()
    sent2=sent2.split()
    used=[]            #list where I store the words I`ve matched
    if len(sent1)!=len(sent2): return 0
    for word in sent1:
        for word2 in sent2:
            if word2 not in used and words_anagrams(word,word2)==1:
                used.append(word2)
    if len(used)==len(sent2):
        return 1
    return 0

#print sent_anagrams("ellHo world","ldwor Hello")
